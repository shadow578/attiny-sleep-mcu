# use `pio run -t upload` to upload firmware using usbasp.
# use `pio run -t fuses` to set fuses using usbasp.

# note: to upload, you need to manually update the tool-avrdude package to avrdude version 8.0 or newer
# to do this, simply download the latest version and then replace avrdude.exe and avrdude.conf in the tool-avrdude package folder

[platformio]
default_envs = attiny85

# basic environment for attiny85
[env:attiny85]
platform = atmelavr
board = attiny85
framework = arduino
board_build.core = tiny      # use https://github.com/SpenceKonde/ATTinyCore

# set fuses, calculate using https://www.engbedded.com/fusecalc/:
# - use internal RC oscillator, 8 MHz, 6CK/14CK + 64ms (default)
# - no clock output on PB4
# - divide clock by 8 (=> 1 MHz CPU clock)
# - disable BOD
# - don't care about EEPROM saving
# - no WDT on boot
# - allow SPI programming
# - disable debugWIRE
# - don't touch reset pin, keep as reset
# - disable self programming
board_fuses.lfuse = 0x62
board_fuses.hfuse = 0xDF
board_fuses.efuse = 0xFF

board_build.f_cpu = 1000000L # set 1 MHz CPU clock

upload_protocol = usbasp
upload_flags =
    -Pusb
    -B8                      # divide SPI clock by 8

# decreased clock speed environment
# may save power, but may soft-brick the chip since upload may fail...
[env:attiny85_slow]
extends = env:attiny85

# set fuses like above, but:
# - use WDT oscillator, 128 kHz, 6CK/14CK + 64 ms
# - don't divide clock by 8
board_fuses.lfuse = 0xE4
# hfuse and efuse unchanged

board_build.f_cpu = 128000L # set 128 kHz CPU clock

upload_flags =
    ${env:attiny85.upload_flags}
    -B32                     # divide SPI clock by 32 to allow upload with slow clock (~= USBasp slow)
