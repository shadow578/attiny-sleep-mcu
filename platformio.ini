# use `pio run -t upload` to upload firmware using usbasp.
# use `pio run -t fuses` to set fuses using usbasp.

# note: to upload, you need to manually update the tool-avrdude package to avrdude version 8.0 or newer
# to do this, simply download the latest version and then replace avrdude.exe and avrdude.conf in the tool-avrdude package folder

[platformio]
default_envs = attiny13

# basic environment for attiny13
[env:attiny13]
platform = atmelavr
framework = arduino
board = attiny13a
board_build.core = MicroCore          # use https://github.com/MCUdude/MicroCore

# fuses, validate using https://www.engbedded.com/fusecalc/
board_build.f_cpu = 1200000L          # 1.2 MHz
board_hardware.oscillator = internal  # use internal oscillator
board_hardware.uart = no_bootloader   # no serial bootloader
board_hardware.bod = disable          # disable brown-out detection
board_hardware.eesave = no            # don't care about EEPROM saving, we don't use it
                                      # no option for WDT, it's always fused to disabled

upload_protocol = usbasp
upload_flags =
    -Pusb
    -B8                               # divide SPI clock by 8

# decreased clock speed environment for attiny13
# may save power, but may soft-brick the chip since upload may fail...
# note: build will give warnings about clock speed being too low, this is only relevant to UART which we don't use
[env:attiny13_slow]
extends = env:attiny13
board_build.f_cpu = 128000L           # 128 kHz wdt oscillator, saves power by not enabling the 4.8 MHz / 9.6 MHz oscillator

upload_flags =
    ${env:attiny13.upload_flags}
    -B32                               # divide SPI clock by 32 to allow upload with slow clock (~= USBasp slow)
